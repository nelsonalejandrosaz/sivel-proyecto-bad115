//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sivel_proyecto_bad115
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class bad115Entities : DbContext
    {
        public bad115Entities()
            : base("name=bad115Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BODEGAS> BODEGAS { get; set; }
        public virtual DbSet<ESTADO_IMPORTACIONES> ESTADO_IMPORTACIONES { get; set; }
        public virtual DbSet<IMPORTACIONES> IMPORTACIONES { get; set; }
        public virtual DbSet<IMPORTADORES> IMPORTADORES { get; set; }
        public virtual DbSet<MOVIMIENTOS> MOVIMIENTOS { get; set; }

        internal void InsertarImportador(int iD_IMPORTADOR, int nIT, string nOMBRES, string aPELLIDOS, string aPELLIDO_CASADA, string gENERO, DateTime fECHA_NACIMIENTO, IMPORTADORES iMPORTADORES, string dIRECCION, string pERSONA_RESPONSABLE, string tELEFONO_RESPONSABLE, string eMAIL)
        {
            throw new NotImplementedException();
        }

        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<TALLERES> TALLERES { get; set; }
        public virtual DbSet<TIPO_MOVIMIENTOS> TIPO_MOVIMIENTOS { get; set; }
        public virtual DbSet<TIPO_REMOLQUES> TIPO_REMOLQUES { get; set; }
        public virtual DbSet<UBICACIONES> UBICACIONES { get; set; }
        public virtual DbSet<USUARIOS> USUARIOS { get; set; }
        public virtual DbSet<VEHICULOS> VEHICULOS { get; set; }
    
        public virtual int InsertarImportador(Nullable<int> id_importador, Nullable<int> nit, string nombre, string apellido, string apellido_casada, string genero, Nullable<System.DateTime> fechadeNacimiento, string direccion, string persona_responsable, string telefono_responsable, string email)
        {
            var id_importadorParameter = id_importador.HasValue ?
                new ObjectParameter("id_importador", id_importador) :
                new ObjectParameter("id_importador", typeof(int));
    
            var nitParameter = nit.HasValue ?
                new ObjectParameter("nit", nit) :
                new ObjectParameter("nit", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var apellido_casadaParameter = apellido_casada != null ?
                new ObjectParameter("apellido_casada", apellido_casada) :
                new ObjectParameter("apellido_casada", typeof(string));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            var fechadeNacimientoParameter = fechadeNacimiento.HasValue ?
                new ObjectParameter("fechadeNacimiento", fechadeNacimiento) :
                new ObjectParameter("fechadeNacimiento", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var persona_responsableParameter = persona_responsable != null ?
                new ObjectParameter("persona_responsable", persona_responsable) :
                new ObjectParameter("persona_responsable", typeof(string));
    
            var telefono_responsableParameter = telefono_responsable != null ?
                new ObjectParameter("telefono_responsable", telefono_responsable) :
                new ObjectParameter("telefono_responsable", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarImportador", id_importadorParameter, nitParameter, nombreParameter, apellidoParameter, apellido_casadaParameter, generoParameter, fechadeNacimientoParameter, direccionParameter, persona_responsableParameter, telefono_responsableParameter, emailParameter);
        }
    }
}
